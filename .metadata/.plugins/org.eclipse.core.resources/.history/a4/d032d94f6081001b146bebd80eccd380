package ma.youcode.api.dao;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import ma.youcode.api.model.Appointment;
import ma.youcode.api.model.User;
import ma.youcode.api.rowmapper.AppointmentRowMapper;
import ma.youcode.api.rowmapper.UserRowMapper;

@Repository
public class AdminDAOImpl implements AdminDAO {
	@Autowired
	private JdbcTemplate jdbcTemplate;

	@Override
	public List<User> loadUsers() {

		String sql = "SELECT * FROM users WHERE isAuthenticated = 0";

		List<User> usersList = jdbcTemplate.query(sql, new UserRowMapper());

		return usersList;
	}

	@Override
	public int acceptUser(String id) {
		String updateQuery = "UPDATE users SET isAuthenticated = 1 WHERE id = ?";
		
		int afftedRows = jdbcTemplate.update(updateQuery, id);
		

		System.out.println("user accepted with ID: " + id);
		System.out.println("Affected Rows: " + afftedRows);
		
		return afftedRows;
		
	}

	@Override
	public int rejectUser(String id) {
		String deleteQuery = "DELETE FROM users WHERE id = ?";
		int afftedRows = jdbcTemplate.update(deleteQuery, id);
		System.out.println("rejectUser - Affected Rows: " + afftedRows);
		
		return afftedRows;
	}

	@Override
	public List<Appointment> loadAppointments() {
		String sql = "SELECT * FROM appointments, users WHERE appointments.isTaken = '1'";

		List<Appointment> appointmentsList = jdbcTemplate.query(sql, new AppointmentRowMapper());

		return appointmentsList;
	}

}
